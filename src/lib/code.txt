package com.example.controller;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import com.example.context.Context;
import com.example.model.PageModel;
import com.example.exception.PluginException;
import com.example.properties.PluginProperties;
import com.example.constants.CustomBatchUpdateConstants;
import com.example.logging.ILogger;
import com.example.logging.LoggerFactory;

@ExtendWith(MockitoExtension.class)
class CustomBatchSearchPageControllerTest {

    @Mock
    private Context mockContext;
    
    @Mock
    private PageModel mockPageModel;
    
    @Mock
    private HttpServletRequest mockServletRequest;
    
    @Mock
    private ILogger mockLogger;
    
    @InjectMocks
    private CustomBatchSearchPageController controller;
    
    @BeforeEach
    void setUp() {
        // Mock static logger factory
        try (MockedStatic<LoggerFactory> loggerFactory = mockStatic(LoggerFactory.class)) {
            loggerFactory.when(() -> LoggerFactory.getLogger(CustomBatchSearchPageController.class))
                        .thenReturn(mockLogger);
        }
    }
    
    @Test
    void testGetPageLocation_WithNullEntitlementInfo_ReturnsVtlPage() {
        // Given
        when(mockContext.getServletRequest()).thenReturn(mockServletRequest);
        when(mockServletRequest.getParameter("entitlementInfo")).thenReturn(null);
        
        // When
        String result = controller.getPageLocation(mockContext);
        
        // Then
        assertEquals("BatchUpdateSearchScreen.vtl", result);
        verify(mockLogger).debug("CustomBatchSearchPageController getPageLocation method started");
        verify(mockServletRequest).getParameter("entitlementInfo");
    }
    
    @Test
    void testGetPageLocation_WithEmptyEntitlementInfo_ReturnsVtlPage() {
        // Given
        when(mockContext.getServletRequest()).thenReturn(mockServletRequest);
        when(mockServletRequest.getParameter("entitlementInfo")).thenReturn("");
        
        // When
        String result = controller.getPageLocation(mockContext);
        
        // Then
        assertEquals("BatchUpdateSearchScreen.vtl", result);
        verify(mockLogger).debug("CustomBatchSearchPageController getPageLocation method started");
        verify(mockServletRequest).getParameter("entitlementInfo");
    }
    
    @Test
    void testGetPageLocation_WithValidEntitlementInfo_ReturnsNull() {
        // Given
        when(mockContext.getServletRequest()).thenReturn(mockServletRequest);
        when(mockServletRequest.getParameter("entitlementInfo")).thenReturn("validEntitlement");
        
        // When
        String result = controller.getPageLocation(mockContext);
        
        // Then
        assertNull(result);
        verify(mockLogger).debug("CustomBatchSearchPageController getPageLocation method started");
        verify(mockLogger).debug("CustomBatch SearchPageController: getPageLocation entitlementInfo method");
        verify(mockServletRequest).getParameter("entitlementInfo");
    }
    
    @Test
    void testHandleSubmit_LogsDebugMessage() throws PluginException {
        // Given
        // No specific setup needed for this test
        
        // When
        controller.handleSubmit(mockContext, mockPageModel);
        
        // Then
        verify(mockLogger).debug("CustomBatchSearchPageController handleSubmit method");
        // Method should complete without throwing exception
    }
    
    @Test
    void testPreparePageModel_WithNullEntitlementInfo_SetsPageModelValues() throws PluginException {
        // Given
        String mockVfsPath = "/mock/vfs/path";
        when(mockContext.getServletRequest()).thenReturn(mockServletRequest);
        when(mockServletRequest.getParameter("entitlementInfo")).thenReturn(null);
        
        try (MockedStatic<PluginProperties> pluginProperties = mockStatic(PluginProperties.class)) {
            pluginProperties.when(() -> PluginProperties.getPropertyValue("vfsPath"))
                           .thenReturn(mockVfsPath);
            
            // When
            controller.preparePageModel(mockContext, mockPageModel);
            
            // Then
            verify(mockPageModel).setTitle("Batch Upload");
            verify(mockPageModel).setValue("vfsPath", mockVfsPath);
            verify(mockLogger).debug("CustomBatchSearchPageController: vfsPath::" + mockVfsPath);
            verify(mockServletRequest).getParameter("entitlementInfo");
        }
    }
    
    @Test
    void testPreparePageModel_WithEmptyEntitlementInfo_SetsPageModelValues() throws PluginException {
        // Given
        String mockVfsPath = "/mock/vfs/path";
        when(mockContext.getServletRequest()).thenReturn(mockServletRequest);
        when(mockServletRequest.getParameter("entitlementInfo")).thenReturn("");
        
        try (MockedStatic<PluginProperties> pluginProperties = mockStatic(PluginProperties.class)) {
            pluginProperties.when(() -> PluginProperties.getPropertyValue("vfsPath"))
                           .thenReturn(mockVfsPath);
            
            // When
            controller.preparePageModel(mockContext, mockPageModel);
            
            // Then
            verify(mockPageModel).setTitle("Batch Upload");
            verify(mockPageModel).setValue("vfsPath", mockVfsPath);
            verify(mockLogger).debug("CustomBatchSearchPageController: vfsPath::" + mockVfsPath);
            verify(mockServletRequest).getParameter("entitlementInfo");
        }
    }
    
    @Test
    void testPreparePageModel_WithValidEntitlementInfo_ForwardsAndSetsValues() throws PluginException {
        // Given
        String mockVfsPath = "/mock/vfs/path";
        String entitlementInfo = "validEntitlement";
        when(mockContext.getServletRequest()).thenReturn(mockServletRequest);
        when(mockServletRequest.getParameter("entitlementInfo")).thenReturn(entitlementInfo);
        
        try (MockedStatic<PluginProperties> pluginProperties = mockStatic(PluginProperties.class);
             MockedStatic<CustomBatchUpdateConstants> constants = mockStatic(CustomBatchUpdateConstants.class)) {
            
            pluginProperties.when(() -> PluginProperties.getPropertyValue("vfsPath"))
                           .thenReturn(mockVfsPath);
            
            // Mock constants
            constants.when(() -> CustomBatchUpdateConstants.USER_ENTITLEMENT)
                    .thenReturn("USER_ENTITLEMENT");
            
            // When
            controller.preparePageModel(mockContext, mockPageModel);
            
            // Then
            verify(mockLogger).debug("CustomBatchSearchPageController: entitlementInfo");
            verify(mockContext).forward(eq("USER_ENTITLEMENT"), eq("USER_ENTITLEMENT"), 
                                      eq("USER_ENTITLEMENT"), any(Map.class));
            verify(mockPageModel).setTitle("Batch Upload");
            verify(mockPageModel).setValue("vfsPath", mockVfsPath);
            verify(mockLogger).debug("CustomBatchSearchPageController: vfsPath::" + mockVfsPath);
            verify(mockServletRequest).getParameter("entitlementInfo");
        }
    }
    
    @Test
    void testPreparePageModel_WithPluginException_PropagatesException() throws PluginException {
        // Given
        when(mockContext.getServletRequest()).thenReturn(mockServletRequest);
        when(mockServletRequest.getParameter("entitlementInfo")).thenReturn(null);
        
        try (MockedStatic<PluginProperties> pluginProperties = mockStatic(PluginProperties.class)) {
            pluginProperties.when(() -> PluginProperties.getPropertyValue("vfsPath"))
                           .thenThrow(new RuntimeException("Property not found"));
            
            // When & Then
            assertThrows(RuntimeException.class, () -> {
                controller.preparePageModel(mockContext, mockPageModel);
            });
            
            verify(mockPageModel).setTitle("Batch Upload");
            verify(mockServletRequest).getParameter("entitlementInfo");
        }
    }
    
    @Test
    void testPreparePageModel_VerifyMapCreation() throws PluginException {
        // Given
        String mockVfsPath = "/mock/vfs/path";
        when(mockContext.getServletRequest()).thenReturn(mockServletRequest);
        when(mockServletRequest.getParameter("entitlementInfo")).thenReturn("validEntitlement");
        
        try (MockedStatic<PluginProperties> pluginProperties = mockStatic(PluginProperties.class);
             MockedStatic<CustomBatchUpdateConstants> constants = mockStatic(CustomBatchUpdateConstants.class)) {
            
            pluginProperties.when(() -> PluginProperties.getPropertyValue("vfsPath"))
                           .thenReturn(mockVfsPath);
            
            constants.when(() -> CustomBatchUpdateConstants.USER_ENTITLEMENT)
                    .thenReturn("USER_ENTITLEMENT");
            
            // When
            controller.preparePageModel(mockContext, mockPageModel);
            
            // Then
            verify(mockContext).forward(eq("USER_ENTITLEMENT"), eq("USER_ENTITLEMENT"), 
                                      eq("USER_ENTITLEMENT"), any(HashMap.class));
        }
    }
}
