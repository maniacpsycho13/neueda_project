@Mock
    private Connection mockConnection;

    @Mock
    private PreparedStatement mockPreparedStatement;

    @InjectMocks
    private CitiEventService citiEventService; // Class containing the method

    @Test
    void insertCitiEventDetail_validAlertId_returnsTrue() throws Exception {
        // Mock static CacheFactory
        try (MockedStatic<CacheFactory> cacheFactoryMock = Mockito.mockStatic(CacheFactory.class)) {
            Map<String, String> mockCacheMap = new HashMap<>();
            mockCacheMap.put("EMAIL_EVENT_QRY", "test-query");
            cacheFactoryMock.when(CacheFactory::get_mapPropertyKeyValue).thenReturn(mockCacheMap);

            // Mock database interactions
            when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
            doReturn(mockConnection).when(citiEventService).getConnection();

            // Execute method
            boolean result = citiEventService.insertCitiEventDetail("valid123");

            // Verify behavior
            assertTrue(result);
            verify(mockPreparedStatement).setString(1, "valid123");
            verify(mockPreparedStatement).setString(2, "valid123");
            verify(mockPreparedStatement).executeQuery();
            verify(mockConnection).close();
            verify(mockPreparedStatement).close();
        }
    }

    @Test
    void insertCitiEventDetail_nullAlertId_throwsException() {
        try (MockedStatic<CacheFactory> cacheFactoryMock = Mockito.mockStatic(CacheFactory.class)) {
            Map<String, String> mockCacheMap = new HashMap<>();
            mockCacheMap.put("EMAIL_EVENT_QRY", "test-query");
            cacheFactoryMock.when(CacheFactory::get_mapPropertyKeyValue).thenReturn(mockCacheMap);

            when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
            doReturn(mockConnection).when(citiEventService).getConnection();
            doThrow(new SQLException("DB error")).when(mockPreparedStatement).executeQuery();

            // Execute and verify exception
            assertThrows(SQLException.class, () -> 
                citiEventService.insertCitiEventDetail(null)
            );

            // Verify resource cleanup
            verify(mockConnection).close();
            verify(mockPreparedStatement).close();
        }
    }

    @Test
    void insertCitiEventDetail_emptyAlertId_returnsTrue() throws Exception {
        try (MockedStatic<CacheFactory> cacheFactoryMock = Mockito.mockStatic(CacheFactory.class)) {
            Map<String, String> mockCacheMap = new HashMap<>();
            mockCacheMap.put("EMAIL_EVENT_QRY", "test-query");
            cacheFactoryMock.when(CacheFactory::get_mapPropertyKeyValue).thenReturn(mockCacheMap);

            when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
            doReturn(mockConnection).when(citiEventService).getConnection();

            boolean result = citiEventService.insertCitiEventDetail("");

            assertTrue(result);
            verify(mockPreparedStatement).setString(1, "");
            verify(mockPreparedStatement).setString(2, "");
            verify(mockPreparedStatement).executeQuery();
        }
    }

    @Test
    void insertCitiEventDetail_databaseConnectionFails_throwsException() throws Exception {
        try (MockedStatic<CacheFactory> cacheFactoryMock = Mockito.mockStatic(CacheFactory.class)) {
            Map<String, String> mockCacheMap = new HashMap<>();
            mockCacheMap.put("EMAIL_EVENT_QRY", "test-query");
            cacheFactoryMock.when(CacheFactory::get_mapPropertyKeyValue).thenReturn(mockCacheMap);

            doThrow(new SQLException("Connection failed"))
                .when(citiEventService).getConnection();

            assertThrows(SQLException.class, () -> 
                citiEventService.insertCitiEventDetail("anyId")
            );
        }
    }
