@BeforeEach
    void setUp() {
        // Initialize the class instance (replace with actual class name)
        instance = spy(new YourClassName());
        
        // Mock the logger field
        try {
            java.lang.reflect.Field loggerField = YourClassName.class.getDeclaredField("logger");
            loggerField.setAccessible(true);
            loggerField.set(instance, mockLogger);
        } catch (Exception e) {
            // Handle reflection exception
        }
        
        // Setup mock property map
        mockPropertyMap = new HashMap<>();
        mockPropertyMap.put("EMAIL_EVENT_QRY", "INSERT INTO CITI_EVENT_DETAILS (PK_CITI_EVENT_DETAILS, ALERT_ID, STAGE, ACTION_TEXT) VALUES (CITI_SEQ_EVENT_DETAILS.NEXTVAL,?, (SELECT CW.WSC_STEP_DESCRIPTION FROM CITI_WORKFLOW CW WHERE A.ALERT_ID=? AND A.status_id =CW.WSC_STEP_ID), 'admin', 'Administrator')");
        
        // Mock CacheFactory
        cacheFactoryMock = mockStatic(CacheFactory.class);
        cacheFactoryMock.when(CacheFactory::get_mapPropertyKeyValue)
                       .thenReturn(mockPropertyMap);
    }
    
    @AfterEach
    void tearDown() {
        cacheFactoryMock.close();
    }
    
    @Test
    @DisplayName("Test successful insertion with valid alertId")
    void testSuccessfulInsertionWithValidAlertId() throws SQLException {
        // Arrange
        String alertId = "ALERT123";
        
        doReturn(mockConnection).when(instance).getConnection();
        doNothing().when(instance).closeDBConnection(any(Connection.class), any(PreparedStatement.class), isNull());
        
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(null);
        
        // Act
        boolean result = instance.insertCitiEventDetail(alertId);
        
        // Assert
        assertTrue(result, "Method should return true for successful insertion");
        
        verify(mockConnection).prepareStatement(mockPropertyMap.get("EMAIL_EVENT_QRY"));
        verify(mockPreparedStatement).setString(1, alertId);
        verify(mockPreparedStatement).setString(2, alertId);
        verify(mockPreparedStatement).executeQuery();
        verify(mockLogger).debug("CITI_EVENT_DETAIL Record Inserted Successfully..");
        verify(instance).closeDBConnection(mockConnection, mockPreparedStatement, null);
    }
