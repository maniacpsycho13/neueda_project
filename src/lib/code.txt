package com.example.controller;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import com.example.bo.IDocumentationBO;
import com.example.bo.IAuditComponentBo;
import com.example.constants.CustomBatchUpdateConstants;
import com.example.context.Context;
import com.example.exception.PluginException;
import com.example.model.PageModel;
import com.example.user.User;
import com.example.vo.AuditComponentVo;
import com.example.vo.DocumentationInputVO;
import com.example.file.UploadedFile;

@RunWith(MockitoJUnitRunner.class)
public class AddAttachmentControllerTest {

    @InjectMocks
    private AddAttachmentController addAttachmentController;

    @Mock
    private IDocumentationBO documentationBO;

    @Mock
    private IAuditComponentBo auditComponentBo;

    @Mock
    private Context context;

    @Mock
    private PageModel pageModel;

    @Mock
    private HttpServletRequest servletRequest;

    @Mock
    private HttpServletResponse servletResponse;

    @Mock
    private User currentUser;

    @Mock
    private UploadedFile uploadedFile;

    @Mock
    private InputStream fileInputStream;

    private StringWriter stringWriter;
    private PrintWriter printWriter;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        
        stringWriter = new StringWriter();
        printWriter = new PrintWriter(stringWriter);
        
        when(context.getServletRequest()).thenReturn(servletRequest);
        when(context.getServletResponse()).thenReturn(servletResponse);
        when(context.getCurrentUser()).thenReturn(currentUser);
        when(servletResponse.getWriter()).thenReturn(printWriter);
        
        when(currentUser.getUserIdentifier()).thenReturn("testUser");
        when(currentUser.getFullName()).thenReturn("Test User");
        
        when(uploadedFile.getSize()).thenReturn(1024L);
        when(uploadedFile.getInputStream()).thenReturn(fileInputStream);
    }

    @Test
    public void testPreparePageModel_SuccessfulFileUpload() throws Exception {
        // Arrange
        String componentCode = "COMP001";
        String componentAction = "ADD";
        String componentRowId = "123";
        String batchUpdateRequestId = "REQ001";
        
        JSONObject fileJson = new JSONObject();
        fileJson.put("fileName", "test.pdf");
        fileJson.put("FileDescription", "Test document");
        
        JSONArray jsonArray = new JSONArray();
        jsonArray.put(fileJson);
        String allFilesDesc = jsonArray.toString();
        
        Map<String, UploadedFile> uploadedFiles = new HashMap<>();
        uploadedFiles.put("test.pdf", uploadedFile);
        
        when(servletRequest.getParameter("componentCode")).thenReturn(componentCode);
        when(servletRequest.getParameter("componentAction")).thenReturn(componentAction);
        when(servletRequest.getParameter("componentRowId")).thenReturn(componentRowId);
        when(servletRequest.getParameter("descriptionJsonFormat")).thenReturn(allFilesDesc);
        when(servletRequest.getParameter("batchUpdateRequestId")).thenReturn(batchUpdateRequestId);
        when(context.getUploadedFiles()).thenReturn(uploadedFiles);
        
        // Act
        addAttachmentController.preparePageModel(context, pageModel);
        
        // Assert
        ArgumentCaptor<List<DocumentationInputVO>> inputVOCaptor = 
            ArgumentCaptor.forClass(List.class);
        verify(documentationBO).addAttachments(inputVOCaptor.capture());
        
        List<DocumentationInputVO> capturedInputVOs = inputVOCaptor.getValue();
        assertEquals(1, capturedInputVOs.size());
        
        DocumentationInputVO docVO = capturedInputVOs.get(0);
        assertEquals(componentCode, docVO.getComponentCode());
        assertEquals(componentAction, docVO.getComponentAction());
        assertEquals(Integer.parseInt(componentRowId), docVO.getComponentRowId());
        assertEquals("test.pdf", docVO.getFileName());
        assertEquals(1024L, docVO.getFileSize());
        assertEquals("Test document", docVO.getFileDescription());
        assertEquals("testUser", docVO.getUserIdentifier());
        
        // Verify audit record was created
        verify(auditComponentBo).insertBatchAuditDetails(any(AuditComponentVo.class));
        
        // Verify response
        assertTrue(stringWriter.toString().contains(CustomBatchUpdateConstants.SUCCESS));
    }

    @Test
    public void testPreparePageModel_WithInvalidCharactersInDescription() throws Exception {
        // Arrange
        String componentCode = "COMP001";
        String componentAction = "ADD";
        String componentRowId = "123";
        String batchUpdateRequestId = "REQ001";
        
        // JSON with invalid characters that should be stripped
        String invalidJson = "{\"fileName\":\"test.pdf\",\"FileDescription\":\"Test\u0001document\u0002\"}";
        String allFilesDesc = "[" + invalidJson + "]";
        
        Map<String, UploadedFile> uploadedFiles = new HashMap<>();
        uploadedFiles.put("test.pdf", uploadedFile);
        
        when(servletRequest.getParameter("componentCode")).thenReturn(componentCode);
        when(servletRequest.getParameter("componentAction")).thenReturn(componentAction);
        when(servletRequest.getParameter("componentRowId")).thenReturn(componentRowId);
        when(servletRequest.getParameter("descriptionJsonFormat")).thenReturn(allFilesDesc);
        when(servletRequest.getParameter("batchUpdateRequestId")).thenReturn(batchUpdateRequestId);
        when(context.getUploadedFiles()).thenReturn(uploadedFiles);
        
        // Act
        addAttachmentController.preparePageModel(context, pageModel);
        
        // Assert
        verify(documentationBO).addAttachments(any(List.class));
        assertTrue(stringWriter.toString().contains(CustomBatchUpdateConstants.SUCCESS));
    }

    @Test
    public void testPreparePageModel_EmptyFileDescription() throws Exception {
        // Arrange
        String componentCode = "COMP001";
        String componentAction = "ADD";
        String componentRowId = "123";
        String batchUpdateRequestId = "REQ001";
        String allFilesDesc = "";
        
        Map<String, UploadedFile> uploadedFiles = new HashMap<>();
        uploadedFiles.put("test.pdf", uploadedFile);
        
        when(servletRequest.getParameter("componentCode")).thenReturn(componentCode);
        when(servletRequest.getParameter("componentAction")).thenReturn(componentAction);
        when(servletRequest.getParameter("componentRowId")).thenReturn(componentRowId);
        when(servletRequest.getParameter("descriptionJsonFormat")).thenReturn(allFilesDesc);
        when(servletRequest.getParameter("batchUpdateRequestId")).thenReturn(batchUpdateRequestId);
        when(context.getUploadedFiles()).thenReturn(uploadedFiles);
        
        // Act
        addAttachmentController.preparePageModel(context, pageModel);
        
        // Assert
        ArgumentCaptor<List<DocumentationInputVO>> inputVOCaptor = 
            ArgumentCaptor.forClass(List.class);
        verify(documentationBO).addAttachments(inputVOCaptor.capture());
        
        List<DocumentationInputVO> capturedInputVOs = inputVOCaptor.getValue();
        assertEquals(1, capturedInputVOs.size());
        
        DocumentationInputVO docVO = capturedInputVOs.get(0);
        assertNull(docVO.getFileDescription()); // Should be null when no description mapping exists
    }

    @Test
    public void testPreparePageModel_ZeroSizeFile() throws Exception {
        // Arrange
        String componentCode = "COMP001";
        String componentAction = "ADD";
        String componentRowId = "123";
        String batchUpdateRequestId = "REQ001";
        
        JSONObject fileJson = new JSONObject();
        fileJson.put("fileName", "empty.pdf");
        fileJson.put("FileDescription", "Empty file");
        
        JSONArray jsonArray = new JSONArray();
        jsonArray.put(fileJson);
        String allFilesDesc = jsonArray.toString();
        
        Map<String, UploadedFile> uploadedFiles = new HashMap<>();
        uploadedFiles.put("empty.pdf", uploadedFile);
        
        when(uploadedFile.getSize()).thenReturn(0L); // Zero size file
        
        when(servletRequest.getParameter("componentCode")).thenReturn(componentCode);
        when(servletRequest.getParameter("componentAction")).thenReturn(componentAction);
        when(servletRequest.getParameter("componentRowId")).thenReturn(componentRowId);
        when(servletRequest.getParameter("descriptionJsonFormat")).thenReturn(allFilesDesc);
        when(servletRequest.getParameter("batchUpdateRequestId")).thenReturn(batchUpdateRequestId);
        when(context.getUploadedFiles()).thenReturn(uploadedFiles);
        
        // Act
        addAttachmentController.preparePageModel(context, pageModel);
        
        // Assert
        verify(documentationBO).addAttachments(any(List.class));
        // Verify no audit record was created for zero-size file
        verify(auditComponentBo, never()).insertBatchAuditDetails(any(AuditComponentVo.class));
        assertTrue(stringWriter.toString().contains(CustomBatchUpdateConstants.SUCCESS));
    }

    @Test
    public void testPreparePageModel_MultipleFiles() throws Exception {
        // Arrange
        String componentCode = "COMP001";
        String componentAction = "ADD";
        String componentRowId = "123";
        String batchUpdateRequestId = "REQ001";
        
        JSONObject file1Json = new JSONObject();
        file1Json.put("fileName", "file1.pdf");
        file1Json.put("FileDescription", "First file");
        
        JSONObject file2Json = new JSONObject();
        file2Json.put("fileName", "file2.doc");
        file2Json.put("FileDescription", "Second file");
        
        JSONArray jsonArray = new JSONArray();
        jsonArray.put(file1Json);
        jsonArray.put(file2Json);
        String allFilesDesc = jsonArray.toString();
        
        Map<String, UploadedFile> uploadedFiles = new HashMap<>();
        uploadedFiles.put("file1.pdf", uploadedFile);
        uploadedFiles.put("file2.doc", uploadedFile);
        
        when(servletRequest.getParameter("componentCode")).thenReturn(componentCode);
        when(servletRequest.getParameter("componentAction")).thenReturn(componentAction);
        when(servletRequest.getParameter("componentRowId")).thenReturn(componentRowId);
        when(servletRequest.getParameter("descriptionJsonFormat")).thenReturn(allFilesDesc);
        when(servletRequest.getParameter("batchUpdateRequestId")).thenReturn(batchUpdateRequestId);
        when(context.getUploadedFiles()).thenReturn(uploadedFiles);
        
        // Act
        addAttachmentController.preparePageModel(context, pageModel);
        
        // Assert
        ArgumentCaptor<List<DocumentationInputVO>> inputVOCaptor = 
            ArgumentCaptor.forClass(List.class);
        verify(documentationBO).addAttachments(inputVOCaptor.capture());
        
        List<DocumentationInputVO> capturedInputVOs = inputVOCaptor.getValue();
        assertEquals(2, capturedInputVOs.size());
        
        // Verify both audit records were created
        verify(auditComponentBo, times(2)).insertBatchAuditDetails(any(AuditComponentVo.class));
        
        assertTrue(stringWriter.toString().contains(CustomBatchUpdateConstants.SUCCESS));
    }

    @Test
    public void testPreparePageModel_DocumentationBOThrowsException() throws Exception {
        // Arrange
        String componentCode = "COMP001";
        String componentAction = "ADD";
        String componentRowId = "123";
        String batchUpdateRequestId = "REQ001";
        
        JSONObject fileJson = new JSONObject();
        fileJson.put("fileName", "test.pdf");
        fileJson.put("FileDescription", "Test document");
        
        JSONArray jsonArray = new JSONArray();
        jsonArray.put(fileJson);
        String allFilesDesc = jsonArray.toString();
        
        Map<String, UploadedFile> uploadedFiles = new HashMap<>();
        uploadedFiles.put("test.pdf", uploadedFile);
        
        when(servletRequest.getParameter("componentCode")).thenReturn(componentCode);
        when(servletRequest.getParameter("componentAction")).thenReturn(componentAction);
        when(servletRequest.getParameter("componentRowId")).thenReturn(componentRowId);
        when(servletRequest.getParameter("descriptionJsonFormat")).thenReturn(allFilesDesc);
        when(servletRequest.getParameter("batchUpdateRequestId")).thenReturn(batchUpdateRequestId);
        when(context.getUploadedFiles()).thenReturn(uploadedFiles);
        
        // Mock documentationBO to throw exception
        doThrow(new RuntimeException("Database error")).when(documentationBO).addAttachments(any(List.class));
        
        // Act & Assert
        try {
            addAttachmentController.preparePageModel(context, pageModel);
            fail("Expected PluginException to be thrown");
        } catch (PluginException e) {
            assertEquals(CustomBatchUpdateConstants.ERROR_MESSAGE, e.getMessage());
            assertTrue(stringWriter.toString().contains(CustomBatchUpdateConstants.ERROR_ATTACHMENT));
        }
    }

    @Test
    public void testPreparePageModel_AuditBOThrowsException() throws Exception {
        // Arrange
        String componentCode = "COMP001";
        String componentAction = "ADD";
        String componentRowId = "123";
        String batchUpdateRequestId = "REQ001";
        
        JSONObject fileJson = new JSONObject();
        fileJson.put("fileName", "test.pdf");
        fileJson.put("FileDescription", "Test document");
        
        JSONArray jsonArray = new JSONArray();
        jsonArray.put(fileJson);
        String allFilesDesc = jsonArray.toString();
        
        Map<String, UploadedFile> uploadedFiles = new HashMap<>();
        uploadedFiles.put("test.pdf", uploadedFile);
        
        when(servletRequest.getParameter("componentCode")).thenReturn(componentCode);
        when(servletRequest.getParameter("componentAction")).thenReturn(componentAction);
        when(servletRequest.getParameter("componentRowId")).thenReturn(componentRowId);
        when(servletRequest.getParameter("descriptionJsonFormat")).thenReturn(allFilesDesc);
        when(servletRequest.getParameter("batchUpdateRequestId")).thenReturn(batchUpdateRequestId);
        when(context.getUploadedFiles()).thenReturn(uploadedFiles);
        
        // Mock auditComponentBo to throw exception
        doThrow(new RuntimeException("Audit error")).when(auditComponentBo).insertBatchAuditDetails(any(AuditComponentVo.class));
        
        // Act & Assert
        try {
            addAttachmentController.preparePageModel(context, pageModel);
            fail("Expected PluginException to be thrown");
        } catch (PluginException e) {
            assertEquals(CustomBatchUpdateConstants.ERROR_MESSAGE, e.getMessage());
        }
    }

    @Test
    public void testPreparePageModel_InvalidComponentRowId() throws Exception {
        // Arrange
        String componentCode = "COMP001";
        String componentAction = "ADD";
        String componentRowId = "invalid_number";
        String batchUpdateRequestId = "REQ001";
        
        JSONObject fileJson = new JSONObject();
        fileJson.put("fileName", "test.pdf");
        fileJson.put("FileDescription", "Test document");
        
        JSONArray jsonArray = new JSONArray();
        jsonArray.put(fileJson);
        String allFilesDesc = jsonArray.toString();
        
        Map<String, UploadedFile> uploadedFiles = new HashMap<>();
        uploadedFiles.put("test.pdf", uploadedFile);
        
        when(servletRequest.getParameter("componentCode")).thenReturn(componentCode);
        when(servletRequest.getParameter("componentAction")).thenReturn(componentAction);
        when(servletRequest.getParameter("componentRowId")).thenReturn(componentRowId);
        when(servletRequest.getParameter("descriptionJsonFormat")).thenReturn(allFilesDesc);
        when(servletRequest.getParameter("batchUpdateRequestId")).thenReturn(batchUpdateRequestId);
        when(context.getUploadedFiles()).thenReturn(uploadedFiles);
        
        // Act & Assert
        try {
            addAttachmentController.preparePageModel(context, pageModel);
            fail("Expected PluginException to be thrown");
        } catch (PluginException e) {
            assertEquals(CustomBatchUpdateConstants.ERROR_MESSAGE, e.getMessage());
        }
    }

    @Test
    public void testPreparePageModel_NullComponentCode() throws Exception {
        // Arrange
        String componentCode = null;
        String componentAction = "ADD";
        String componentRowId = "123";
        String batchUpdateRequestId = "REQ001";
        
        JSONObject fileJson = new JSONObject();
        fileJson.put("fileName", "test.pdf");
        fileJson.put("FileDescription", "Test document");
        
        JSONArray jsonArray = new JSONArray();
        jsonArray.put(fileJson);
        String allFilesDesc = jsonArray.toString();
        
        Map<String, UploadedFile> uploadedFiles = new HashMap<>();
        uploadedFiles.put("test.pdf", uploadedFile);
        
        when(servletRequest.getParameter("componentCode")).thenReturn(componentCode);
        when(servletRequest.getParameter("componentAction")).thenReturn(componentAction);
        when(servletRequest.getParameter("componentRowId")).thenReturn(componentRowId);
        when(servletRequest.getParameter("descriptionJsonFormat")).thenReturn(allFilesDesc);
        when(servletRequest.getParameter("batchUpdateRequestId")).thenReturn(batchUpdateRequestId);
        when(context.getUploadedFiles()).thenReturn(uploadedFiles);
        
        // Mock documentationBO to throw exception
        doThrow(new RuntimeException("Database error")).when(documentationBO).addAttachments(any(List.class));
        
        // Act & Assert
        try {
            addAttachmentController.preparePageModel(context, pageModel);
            fail("Expected PluginException to be thrown");
        } catch (PluginException e) {
            assertEquals(CustomBatchUpdateConstants.ERROR_MESSAGE, e.getMessage());
            // Should not contain error attachment message when componentCode is null
            assertFalse(stringWriter.toString().contains(CustomBatchUpdateConstants.ERROR_ATTACHMENT));
        }
    }

    @Test
    public void testPreparePageModel_VerifyAuditComponentVoFields() throws Exception {
        // Arrange
        String componentCode = "COMP001";
        String componentAction = "ADD";
        String componentRowId = "123";
        String batchUpdateRequestId = "REQ001";
        
        JSONObject fileJson = new JSONObject();
        fileJson.put("fileName", "test.pdf");
        fileJson.put("FileDescription", "Test document");
        
        JSONArray jsonArray = new JSONArray();
        jsonArray.put(fileJson);
        String allFilesDesc = jsonArray.toString();
        
        Map<String, UploadedFile> uploadedFiles = new HashMap<>();
        uploadedFiles.put("test.pdf", uploadedFile);
        
        when(servletRequest.getParameter("componentCode")).thenReturn(componentCode);
        when(servletRequest.getParameter("componentAction")).thenReturn(componentAction);
        when(servletRequest.getParameter("componentRowId")).thenReturn(componentRowId);
        when(servletRequest.getParameter("descriptionJsonFormat")).thenReturn(allFilesDesc);
        when(servletRequest.getParameter("batchUpdateRequestId")).thenReturn(batchUpdateRequestId);
        when(context.getUploadedFiles()).thenReturn(uploadedFiles);
        
        // Act
        addAttachmentController.preparePageModel(context, pageModel);
        
        // Assert
        ArgumentCaptor<AuditComponentVo> auditCaptor = ArgumentCaptor.forClass(AuditComponentVo.class);
        verify(auditComponentBo).insertBatchAuditDetails(auditCaptor.capture());
        
        AuditComponentVo capturedAuditVo = auditCaptor.getValue();
        assertEquals("testUser", capturedAuditVo.getBue_user_id());
        assertEquals("Test User", capturedAuditVo.getBue_user_name());
        assertEquals(CustomBatchUpdateConstants.ATTACHMENTS_ADDED_STRING, capturedAuditVo.getBue_user_action());
        assertEquals("Attachment Name: test.pdf", capturedAuditVo.getBue_user_descp());
        assertEquals("Test document", capturedAuditVo.getBue_user_comment());
        assertEquals(batchUpdateRequestId, capturedAuditVo.getBue_request_id());
        assertEquals(context, capturedAuditVo.getContext());
        assertNotNull(capturedAuditVo.getBue_create_date());
    }
}
