@Test
public void testPreparePageModel_Success() throws Exception {
    // Set up valid parameters
    when(request.getParameter("componentCode")).thenReturn("COMP123");
    when(request.getParameter("componentAction")).thenReturn("EDIT");
    when(request.getParameter("componentRowId")).thenReturn("1001");
    when(request.getParameter("batchUpdateRequestId")).thenReturn("REQ456");
    
    // Set up valid JSON descriptions
    String validJson = "[{\"fileName\":\"test.txt\",\"FileDescription\":\"Test file\"}]";
    when(request.getParameter("descriptionJsonFormat")).thenReturn(validJson);
    
    // Set up uploaded files
    Map<String, UploadedFile> uploadedFiles = new HashMap<>();
    UploadedFile mockFile = mock(UploadedFile.class);
    when(mockFile.getSize()).thenReturn(1024L);
    when(mockFile.getInputStream()).thenReturn(new ByteArrayInputStream("content".getBytes()));
    uploadedFiles.put("test.txt", mockFile);
    when(context.getUploadedFiles()).thenReturn(uploadedFiles);
    
    // Execute the method
    controller.preparePageModel(context, pageModel);
    
    // Verify core interactions
    ArgumentCaptor<List<DocumentationInputVO>> docsCaptor = ArgumentCaptor.forClass(List.class);
    verify(documentationBO).addAttachments(docsCaptor.capture());
    
    ArgumentCaptor<AuditComponentVo> auditCaptor = ArgumentCaptor.forClass(AuditComponentVo.class);
    verify(auditComponentBo).insertBatchAuditDetails(auditCaptor.capture());
    
    // Verify response
    assertEquals("SUCCESS", responseWriter.toString());
    
    // Verify VO content
    DocumentationInputVO docVo = docsCaptor.getValue().get(0);
    assertEquals("test.txt", docVo.getFileName());
    assertEquals("Test file", docVo.getFileDescription());
    assertEquals("COMP123", docVo.getComponentCode());
    
    // Verify audit log
    AuditComponentVo auditVo = auditCaptor.getValue();
    assertEquals("Attachment Name: test.txt", auditVo.getBue_user_descp());
    assertEquals("Test file", auditVo.getBue_user_comment());
}
