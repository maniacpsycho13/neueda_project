package com.example.documentation.dao;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import com.example.documentation.dao.impl.DocumentationDAOImpl;
import com.example.documentation.exception.DocumentationDAOException;
import com.example.documentation.util.DocumentationUtil;
import com.example.documentation.vo.ComponentActionVO;
import com.example.documentation.vo.DocumentationInputVO;
import com.example.documentation.cache.CacheFactory;
import com.example.documentation.constants.DocumentationConstants;

@ExtendWith(MockitoExtension.class)
class DocumentationDAOImplTest {

    @InjectMocks
    private DocumentationDAOImpl documentationDAO;

    @Mock
    private Connection mockConnection;

    @Mock
    private PreparedStatement mockPreparedStatement;

    @Mock
    private ResultSet mockResultSet;

    @Mock
    private DocumentationInputVO mockDocumentationInputVO;

    @Mock
    private ComponentActionVO mockComponentActionVO;

    @Mock
    private CacheFactory mockCacheFactory;

    private List<ComponentActionVO> mockComponentActions;

    @BeforeEach
    void setUp() {
        mockComponentActions = Arrays.asList(mockComponentActionVO);
    }

    @Test
    void testAddNote_Success() throws Exception {
        // Arrange
        when(mockDocumentationInputVO.getNoteDesc()).thenReturn("Test Note");
        when(mockDocumentationInputVO.getUserInternalId()).thenReturn(123);
        when(mockDocumentationInputVO.getComponentCode()).thenReturn("COMP001");
        when(mockDocumentationInputVO.getComponentAction()).thenReturn("ACTION001");
        when(mockDocumentationInputVO.getComponentRowId()).thenReturn(456);
        when(mockDocumentationInputVO.isSourceDBConnection()).thenReturn(false);

        when(mockComponentActionVO.getComponentCode()).thenReturn("COMP001");
        when(mockComponentActionVO.getComponentActionCode()).thenReturn("ACTION001");
        when(mockComponentActionVO.getComponentActionId()).thenReturn(789);

        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getInt(1)).thenReturn(100);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockPreparedStatement.executeUpdate()).thenReturn(1);

        try (MockedStatic<DocumentationUtil> mockedUtil = mockStatic(DocumentationUtil.class);
             MockedStatic<CacheFactory> mockedCacheFactory = mockStatic(CacheFactory.class)) {
            
            mockedUtil.when(() -> DocumentationUtil.getRCMDBConnection(mockDocumentationInputVO))
                     .thenReturn(mockConnection);
            mockedUtil.when(() -> DocumentationUtil.closeDBConnection(any(), any(), any()))
                     .thenAnswer(invocation -> null);

            mockedCacheFactory.when(() -> CacheFactory.getInstance(mockDocumentationInputVO))
                             .thenReturn(mockCacheFactory);
            when(mockCacheFactory.getCachedObject(DocumentationConstants.COMPONENT_ACTIONS_STR, mockDocumentationInputVO))
                .thenReturn(mockComponentActions);

            // Act
            Boolean result = documentationDAO.addNote(mockDocumentationInputVO);

            // Assert
            assertTrue(result);
            verify(mockPreparedStatement, times(3)).setInt(anyInt(), anyInt());
            verify(mockPreparedStatement, times(1)).setString(anyInt(), anyString());
            verify(mockPreparedStatement, times(2)).executeUpdate();
            mockedUtil.verify(() -> DocumentationUtil.closeDBConnection(any(), any(), any()), times(3));
        }
    }

    @Test
    void testAddNote_NoComponentActionFound() throws Exception {
        // Arrange
        when(mockDocumentationInputVO.getNoteDesc()).thenReturn("Test Note");
        when(mockDocumentationInputVO.getUserInternalId()).thenReturn(123);
        when(mockDocumentationInputVO.getComponentCode()).thenReturn("COMP999");
        when(mockDocumentationInputVO.getComponentAction()).thenReturn("ACTION999");
        when(mockDocumentationInputVO.getComponentRowId()).thenReturn(456);
        when(mockDocumentationInputVO.isSourceDBConnection()).thenReturn(false);

        when(mockComponentActionVO.getComponentCode()).thenReturn("COMP001");
        when(mockComponentActionVO.getComponentActionCode()).thenReturn("ACTION001");

        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getInt(1)).thenReturn(100);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockPreparedStatement.executeUpdate()).thenReturn(1);

        try (MockedStatic<DocumentationUtil> mockedUtil = mockStatic(DocumentationUtil.class);
             MockedStatic<CacheFactory> mockedCacheFactory = mockStatic(CacheFactory.class)) {
            
            mockedUtil.when(() -> DocumentationUtil.getRCMDBConnection(mockDocumentationInputVO))
                     .thenReturn(mockConnection);
            mockedUtil.when(() -> DocumentationUtil.closeDBConnection(any(), any(), any()))
                     .thenAnswer(invocation -> null);

            mockedCacheFactory.when(() -> CacheFactory.getInstance(mockDocumentationInputVO))
                             .thenReturn(mockCacheFactory);
            when(mockCacheFactory.getCachedObject(DocumentationConstants.COMPONENT_ACTIONS_STR, mockDocumentationInputVO))
                .thenReturn(mockComponentActions);

            // Act
            Boolean result = documentationDAO.addNote(mockDocumentationInputVO);

            // Assert
            assertTrue(result);
            // Verify that the method still completes successfully even when no component action is found
            verify(mockPreparedStatement, times(2)).executeUpdate();
        }
    }

    @Test
    void testAddNote_SequenceGenerationFails() throws Exception {
        // Arrange
        when(mockDocumentationInputVO.getNoteDesc()).thenReturn("Test Note");
        when(mockDocumentationInputVO.getUserInternalId()).thenReturn(123);
        when(mockDocumentationInputVO.isSourceDBConnection()).thenReturn(false);

        when(mockResultSet.next()).thenReturn(false); // No sequence value returned

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);

        try (MockedStatic<DocumentationUtil> mockedUtil = mockStatic(DocumentationUtil.class);
             MockedStatic<CacheFactory> mockedCacheFactory = mockStatic(CacheFactory.class)) {
            
            mockedUtil.when(() -> DocumentationUtil.getRCMDBConnection(mockDocumentationInputVO))
                     .thenReturn(mockConnection);
            mockedUtil.when(() -> DocumentationUtil.closeDBConnection(any(), any(), any()))
                     .thenAnswer(invocation -> null);

            mockedCacheFactory.when(() -> CacheFactory.getInstance(mockDocumentationInputVO))
                             .thenReturn(mockCacheFactory);
            when(mockCacheFactory.getCachedObject(DocumentationConstants.COMPONENT_ACTIONS_STR, mockDocumentationInputVO))
                .thenReturn(mockComponentActions);

            // Act & Assert
            assertThrows(NullPointerException.class, () -> {
                documentationDAO.addNote(mockDocumentationInputVO);
            });
        }
    }

    @Test
    void testAddNote_DatabaseException() throws Exception {
        // Arrange
        when(mockDocumentationInputVO.isSourceDBConnection()).thenReturn(false);
        
        SQLException sqlException = new SQLException("Database connection failed");

        try (MockedStatic<DocumentationUtil> mockedUtil = mockStatic(DocumentationUtil.class)) {
            mockedUtil.when(() -> DocumentationUtil.getRCMDBConnection(mockDocumentationInputVO))
                     .thenThrow(sqlException);
            mockedUtil.when(() -> DocumentationUtil.closeDBConnection(any(), any(), any()))
                     .thenAnswer(invocation -> null);

            // Act & Assert
            DocumentationDAOException exception = assertThrows(DocumentationDAOException.class, () -> {
                documentationDAO.addNote(mockDocumentationInputVO);
            });

            assertEquals(sqlException, exception.getCause());
        }
    }

    @Test
    void testAddNote_PreparedStatementException() throws Exception {
        // Arrange
        when(mockDocumentationInputVO.getNoteDesc()).thenReturn("Test Note");
        when(mockDocumentationInputVO.getUserInternalId()).thenReturn(123);
        when(mockDocumentationInputVO.isSourceDBConnection()).thenReturn(false);

        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getInt(1)).thenReturn(100);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        
        SQLException sqlException = new SQLException("PreparedStatement execution failed");
        when(mockPreparedStatement.executeUpdate()).thenThrow(sqlException);

        try (MockedStatic<DocumentationUtil> mockedUtil = mockStatic(DocumentationUtil.class);
             MockedStatic<CacheFactory> mockedCacheFactory = mockStatic(CacheFactory.class)) {
            
            mockedUtil.when(() -> DocumentationUtil.getRCMDBConnection(mockDocumentationInputVO))
                     .thenReturn(mockConnection);
            mockedUtil.when(() -> DocumentationUtil.closeDBConnection(any(), any(), any()))
                     .thenAnswer(invocation -> null);

            mockedCacheFactory.when(() -> CacheFactory.getInstance(mockDocumentationInputVO))
                             .thenReturn(mockCacheFactory);
            when(mockCacheFactory.getCachedObject(DocumentationConstants.COMPONENT_ACTIONS_STR, mockDocumentationInputVO))
                .thenReturn(mockComponentActions);

            // Act & Assert
            DocumentationDAOException exception = assertThrows(DocumentationDAOException.class, () -> {
                documentationDAO.addNote(mockDocumentationInputVO);
            });

            assertEquals(sqlException, exception.getCause());
        }
    }

    @Test
    void testAddNote_WithSourceDBConnection() throws Exception {
        // Arrange
        when(mockDocumentationInputVO.getNoteDesc()).thenReturn("Test Note");
        when(mockDocumentationInputVO.getUserInternalId()).thenReturn(123);
        when(mockDocumentationInputVO.getComponentCode()).thenReturn("COMP001");
        when(mockDocumentationInputVO.getComponentAction()).thenReturn("ACTION001");
        when(mockDocumentationInputVO.getComponentRowId()).thenReturn(456);
        when(mockDocumentationInputVO.isSourceDBConnection()).thenReturn(true); // Source DB connection

        when(mockComponentActionVO.getComponentCode()).thenReturn("COMP001");
        when(mockComponentActionVO.getComponentActionCode()).thenReturn("ACTION001");
        when(mockComponentActionVO.getComponentActionId()).thenReturn(789);

        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getInt(1)).thenReturn(100);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockPreparedStatement.executeUpdate()).thenReturn(1);

        try (MockedStatic<DocumentationUtil> mockedUtil = mockStatic(DocumentationUtil.class);
             MockedStatic<CacheFactory> mockedCacheFactory = mockStatic(CacheFactory.class)) {
            
            mockedUtil.when(() -> DocumentationUtil.getRCMDBConnection(mockDocumentationInputVO))
                     .thenReturn(mockConnection);
            mockedUtil.when(() -> DocumentationUtil.closeDBConnection(any(), any(), any()))
                     .thenAnswer(invocation -> null);

            mockedCacheFactory.when(() -> CacheFactory.getInstance(mockDocumentationInputVO))
                             .thenReturn(mockCacheFactory);
            when(mockCacheFactory.getCachedObject(DocumentationConstants.COMPONENT_ACTIONS_STR, mockDocumentationInputVO))
                .thenReturn(mockComponentActions);

            // Act
            Boolean result = documentationDAO.addNote(mockDocumentationInputVO);

            // Assert
            assertTrue(result);
            // Verify that connection is handled differently for source DB connection
            mockedUtil.verify(() -> DocumentationUtil.closeDBConnection(isNull(), isNull(), isNull()), times(1));
        }
    }

    @Test
    void testAddNote_CloseConnectionException() throws Exception {
        // Arrange
        when(mockDocumentationInputVO.getNoteDesc()).thenReturn("Test Note");
        when(mockDocumentationInputVO.getUserInternalId()).thenReturn(123);
        when(mockDocumentationInputVO.getComponentCode()).thenReturn("COMP001");
        when(mockDocumentationInputVO.getComponentAction()).thenReturn("ACTION001");
        when(mockDocumentationInputVO.getComponentRowId()).thenReturn(456);
        when(mockDocumentationInputVO.isSourceDBConnection()).thenReturn(false);

        when(mockComponentActionVO.getComponentCode()).thenReturn("COMP001");
        when(mockComponentActionVO.getComponentActionCode()).thenReturn("ACTION001");
        when(mockComponentActionVO.getComponentActionId()).thenReturn(789);

        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getInt(1)).thenReturn(100);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockPreparedStatement.executeUpdate()).thenReturn(1);

        try (MockedStatic<DocumentationUtil> mockedUtil = mockStatic(DocumentationUtil.class);
             MockedStatic<CacheFactory> mockedCacheFactory = mockStatic(CacheFactory.class)) {
            
            mockedUtil.when(() -> DocumentationUtil.getRCMDBConnection(mockDocumentationInputVO))
                     .thenReturn(mockConnection);
            mockedUtil.when(() -> DocumentationUtil.closeDBConnection(any(), any(), any()))
                     .thenAnswer(invocation -> null);
            // Make the final closeDBConnection call throw an exception
            mockedUtil.when(() -> DocumentationUtil.closeDBConnection(eq(mockConnection), isNull(), isNull()))
                     .thenThrow(new RuntimeException("Close connection failed"));

            mockedCacheFactory.when(() -> CacheFactory.getInstance(mockDocumentationInputVO))
                             .thenReturn(mockCacheFactory);
            when(mockCacheFactory.getCachedObject(DocumentationConstants.COMPONENT_ACTIONS_STR, mockDocumentationInputVO))
                .thenReturn(mockComponentActions);

            // Act
            Boolean result = documentationDAO.addNote(mockDocumentationInputVO);

            // Assert
            assertTrue(result); // Method should still return true even if close connection fails
        }
    }
}
