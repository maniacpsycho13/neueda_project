@PostMapping("/grant")
    public String grantAccess(@RequestBody Map<String, String> payload) {
        String userId = payload.get("userId");
        String roleId = payload.get("roleId");
        String resourceId = payload.get("resourceId");
        String action = payload.get("action");

        if (userId != null) {
            BusinessUserProfileDetails entry = new BusinessUserProfileDetails();
            entry.setUser_identifier(userId);
            entry.setApp_id(Long.valueOf(resourceId));
            entry.setUser_role_profile_ind("USER");
            entry.setUser_profile_details("{\"action\":\"" + action + "\"}");
            businessUserProfileRepo.save(entry);
            return "Entitlement granted to user.";
        } else if (roleId != null) {
            RoleProfileDetails entry = new RoleProfileDetails();
            entry.setRole_identifier(roleId);
            entry.setApp_id(Long.valueOf(resourceId));
            entry.setRole_profile_details("{\"action\":\"" + action + "\"}");
            roleProfileRepo.save(entry);
            return "Entitlement granted to role.";
        }
        return "Invalid request: Must provide userId or roleId.";
    }


@DeleteMapping("/revoke")
    public String revokeAccess(@RequestBody Map<String, String> payload) {
        String userId = payload.get("userId");
        String roleId = payload.get("roleId");
        String resourceId = payload.get("resourceId");
        if (userId != null) {
            List<BusinessUserProfileDetails> entries = businessUserProfileRepo.findByUserIdentifier(userId)
                    .stream().filter(e -> e.getApp_id().equals(Long.valueOf(resourceId))).toList();
            businessUserProfileRepo.deleteAll(entries);
            return "Entitlement revoked from user.";
        } else if (roleId != null) {
            List<RoleProfileDetails> entries = roleProfileRepo.findByRoleIdentifier(roleId)
                    .stream().filter(e -> e.getApp_id().equals(Long.valueOf(resourceId))).toList();
            roleProfileRepo.deleteAll(entries);
            return "Entitlement revoked from role.";
        }
        return "Invalid request: Must provide userId or roleId.";
    }

    @PostMapping("/check")
    public boolean checkAccess(@RequestBody Map<String, String> payload) {
        String userId = payload.get("userId");
        String resourceId = payload.get("resourceId");
        String action = payload.get("action");
        List<BusinessUserProfileDetails> entries = businessUserProfileRepo.findByUserIdentifier(userId)
                .stream().filter(e -> e.getApp_id().equals(Long.valueOf(resourceId))
                && e.getUser_profile_details().contains(action)).toList();
        return !entries.isEmpty();
    }

    @PostMapping("/bulk-grant")
    public String bulkGrant(@RequestBody List<Map<String, String>> bulkPayload) {
        for (Map<String, String> payload : bulkPayload) {
            grantAccess(payload);
        }
        return "Bulk entitlements granted.";
    }

    @GetMapping("/search")
    public List<Object> searchEntitlements(@RequestParam Map<String, String> queryParams) {
        List<Object> results = new ArrayList<>();
        if (queryParams.containsKey("userId")) {
            results.addAll(businessUserProfileRepo.findByUserIdentifier(queryParams.get("userId")));
        }
        if (queryParams.containsKey("roleId")) {
            results.addAll(roleProfileRepo.findByRoleIdentifier(queryParams.get("roleId")));
        }
        return results;
    }

    @GetMapping("/audit-logs")
    public List<String> getAuditLogs(@RequestParam(required = false) String userId,
                                     @RequestParam(required = false) String resourceId) {
        List<String> logs = new ArrayList<>();
        if (userId != null) {
            logs.add("Audit log for user " + userId);
        }
        if (resourceId != null) {
            logs.add("Audit log for resource " + resourceId);
        }
        return logs;
    }

    @GetMapping("/roles/{roleId}/users")
    public List<String> getUsersByRole(@PathVariable String roleId) {
        List<BusinessUserProfileDetails> all = businessUserProfileRepo.findAll();
        List<String> matchedUsers = new ArrayList<>();
        for (BusinessUserProfileDetails detail : all) {
            if (detail.getUser_profile_details() != null && detail.getUser_profile_details().contains(roleId)) {
                matchedUsers.add(detail.getUser_identifier());
            }
        }
        return matchedUsers;
    }

    @GetMapping("/users/{userId}/roles")
    public List<String> getRolesByUser(@PathVariable String userId) {
        List<BusinessUserProfileDetails> details = businessUserProfileRepo.findByUserIdentifier(userId);
        List<String> roles = new ArrayList<>();
        for (BusinessUserProfileDetails detail : details) {
            if (detail.getUser_profile_details() != null) {
                roles.add(detail.getUser_profile_details());
            }
        }
        return roles;
    }
