 @Test
    void mapPropertyKeyValueMap_Success() throws Exception {
        // Setup
        DocumentationInputVO input = new DocumentationInputVO();
        input.setSourceDBConnection(false);
        
        Map<String, String> expectedMap = new HashMap<>();
        expectedMap.put("key", "value");

        try (MockedStatic<DocumentationUtil> docUtil = mockStatic(DocumentationUtil.class);
             MockedStatic<DBUtil> dbUtil = mockStatic(DBUtil.class)) {
            
            // Mock database connection
            Connection mockConn = mock(Connection.class);
            docUtil.when(() -> DocumentationUtil.getRCMDBConnection(input))
                   .thenReturn(mockConn);
            
            // Mock DBUtil response
            dbUtil.when(() -> DBUtil.getPropertyKeyValueMap(mockConn))
                  .thenReturn(expectedMap);
            
            // Execute
            Map<String, String> result = dao.mapPropertyKeyValueMap(input);
            
            // Verify
            assertEquals(expectedMap, result);
            verify(mockConn).close();  // Should close external connection
        }
    }

    @Test
    void mapPropertyKeyValueMap_SourceDBConnectionTrue() throws Exception {
        // Setup
        DocumentationInputVO input = new DocumentationInputVO();
        input.setSourceDBConnection(true);  // Connection should NOT be closed

        try (MockedStatic<DocumentationUtil> docUtil = mockStatic(DocumentationUtil.class);
             MockedStatic<DBUtil> dbUtil = mockStatic(DBUtil.class)) {
            
            Connection mockConn = mock(Connection.class);
            docUtil.when(() -> DocumentationUtil.getRCMDBConnection(input))
                   .thenReturn(mockConn);
            
            dbUtil.when(() -> DBUtil.getPropertyKeyValueMap(mockConn))
                  .thenReturn(new HashMap<>());
            
            // Execute
            dao.mapPropertyKeyValueMap(input);
            
            // Verify
            verify(mockConn, never()).close();  // Should not close external connection
        }
    }

    @Test
    void mapPropertyKeyValueMap_ConnectionFailure() {
        // Setup
        DocumentationInputVO input = new DocumentationInputVO();
        input.setSourceDBConnection(false);
        
        try (MockedStatic<DocumentationUtil> docUtil = mockStatic(DocumentationUtil.class)) {
            // Force connection exception
            docUtil.when(() -> DocumentationUtil.getRCMDBConnection(input))
                   .thenThrow(new SQLException("DB error"));
            
            // Verify exception
            assertThrows(DocumentationDAOException.class, 
                () -> dao.mapPropertyKeyValueMap(input)
            );
        }
    }

    @Test
    void mapPropertyKeyValueMap_CloseConnectionFailure() throws Exception {
        // Setup
        DocumentationInputVO input = new DocumentationInputVO();
        input.setSourceDBConnection(false);  // Should attempt to close
        
        try (MockedStatic<DocumentationUtil> docUtil = mockStatic(DocumentationUtil.class);
             MockedStatic<DBUtil> dbUtil = mockStatic(DBUtil.class)) {
            
            Connection mockConn = mock(Connection.class);
            docUtil.when(() -> DocumentationUtil.getRCMDBConnection(input))
                   .thenReturn(mockConn);
            
            // Force close failure
            doThrow(new SQLException("Close failed")).when(mockConn).close();
            
            // Execute and verify
            assertDoesNotThrow(() -> dao.mapPropertyKeyValueMap(input));
            verify(mockConn).close();  // Should attempt close despite error
        }
    }
}
